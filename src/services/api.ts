import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

// Define TypeScript interfaces for API responses
interface Post {
	id: number
	title: string
	body: string
}

interface NewPost {
	title: string
	body: string
}

// Create the API slice
export const api = createApi({
	reducerPath: 'api',
	baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),
	endpoints: (builder) => ({
		getPosts: builder.query<Post[], void>({
			query: () => '/posts',
		}),
		getPostById: builder.query<Post, string>({
			query: (id) => `/posts/${id}`,
		}),
		createPost: builder.mutation<Post, NewPost>({
			query: (newPost) => ({
				url: '/posts',
				method: 'POST',
				body: newPost,
			}),
		}),
	}),
})

// Export hooks generated by RTK Query
export const { useGetPostsQuery, useGetPostByIdQuery, useCreatePostMutation } = api
